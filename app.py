import streamlit as st
from ibm_watsonx_ai.foundation_models import ModelInference
import re

# Watsonx credentials
model_id = "ibm/granite-3-8b-instruct"
project_id = "d87960d2-d01f-44ba-81ef-a16ad656ad73"
credentials = {
    "url": "https://us-south.ml.cloud.ibm.com",
    "apikey": "lvdUcs_gbbGG-ltm33r7akvMn9EpCQYuI_z7YInwDK_C"
}

st.set_page_config(page_title="EduTutor AI - Bilingual", layout="centered")
st.title("üåê EduTutor AI - Explain & Quiz (Hindi/English)")

language = st.radio("Choose Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç", ["English", "Hindi"])
topic = st.text_input("Enter a topic / ‡§µ‡§ø‡§∑‡§Ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (e.g., Photosynthesis, ‡§™‡§æ‡§ö‡§® ‡§§‡§Ç‡§§‡•ç‡§∞):")

st.subheader("üìÑ Generated MCQs")
st.text_area("MCQs", result, height=400)

if st.button("Generate Explanation and MCQs") and topic.strip():
    try:
        model = ModelInference(
            model_id=model_id,
            params={"decoding_method": "greedy", "max_new_tokens": 800},
            project_id=project_id,
            credentials=credentials
        )

        lang = "in Hindi" if language == "Hindi" else "in English"

        with st.spinner("Explaining the topic... / ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à..."):
            exp_prompt = f"Explain the concept of '{topic}' {lang}."
            explanation = model.generate(exp_prompt)["results"][0]["generated_text"]
            st.subheader("üìñ Explanation / ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ")
            st.write(explanation)

        with st.spinner("Generating questions... / ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..."):
            mcq_prompt = f"""Generate 5 multiple choice questions {lang} on the topic '{topic}'.
Each question should be numbered (1., 2., etc)
Each should have 4 options labeled A., B., C., D.
Also include the correct answer like: Correct Answer: B"""
            quiz_response = model.generate(mcq_prompt)["results"][0]["generated_text"]

            mcqs = parse_mcqs(quiz_response)

        st.subheader("üìù Practice Questions / ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®")
        if mcqs:
            for i, q in enumerate(mcqs):
                st.markdown(f"**Q{i+1}: {q['question']}**")
                for key, val in q["options"].items():
                    st.markdown(f"{key}. {val}")
                st.success(f"‚úÖ Correct Answer: {q['answer']}")
        else:
            st.warning("‚ö†Ô∏è No valid MCQs generated. Try another topic. / ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•Ç‡§∏‡§∞‡§æ ‡§µ‡§ø‡§∑‡§Ø ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Å‡•§")

    except Exception as e:
        st.error(f"Something went wrong: {e}")
